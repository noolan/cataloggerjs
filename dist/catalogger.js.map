{"version":3,"sources":["../node_modules/js-levenshtein/index.js","utilities.js","regular-expressions.js","constants.js","catalogger.js"],"names":["module","exports","_min","d0","d1","d2","bx","ay","a","b","length","tmp","la","lb","charCodeAt","offset","x","y","d3","dd","dy","bx0","bx1","bx2","bx3","vector","push","len","cloneEnumerable","v","JSON","parse","stringify","e","console","error","getNestedValue","obj","keys","defaultValue","undefined","idProperty","intsAreIds","keySeparator","split","Array","isArray","namedLogError","key","splice","int","parseInt","Number","isNaN","found","findByProperty","castToInt","valueToArray","value","blank","removeEmpty","separator","trimStrings","arr","Symbol","iterator","Object","values","String","i","trim","type","valueToString","glue","join","REGULAR_EXPRESSIONS","singleCharacters","punctuation","whitespace","tabsAndVerticalWhitespace","multiSpace","multiWhitespace","articlesAndDeterminers","DEFAULT_CONFIG","relevance","inject","field","threshold","results","limit","sort","byRelevance","enabled","fields","string","replacements","exp","val","LENGTH","OCCURENCES","RELEVANCE","WEIGHT","BUILD_INDEX","GET_RESULTS","INVALIDATE_RESULTS","INVALIDATE_SORTING","NORMALIZE_STRING","UPDATE_RESULTS","CACHE","CONFIG","DATA","INDEX","RESULTS","QUERY","levenshtein","require","Catalogger","documents","options","stringNormalizations","Map","dictionary","create","valid","items","sorted","processed","raw","tokens","config","query","result","dict","includes","rawText","toLowerCase","normalizedText","tokenIndex","token","fieldLength","foundAt","Math","log","docWeight","docs","resultDocuments","set","entries","item","from","output","doc","clear","input","normalizedString","str","has","get","replacement","replace","map","k","dictTokens","queryToken","dictToken","matchValue","min","distance","collator","Intl","Collator","caseFirst","ignorePunctuation","localeMatcher","numeric","sensitivity","usage","docA","docB","comparison","compare","reIndex","rawFields","documentFields","same","rawQuery","Set","catalog","using"],"mappings":"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","file":"catalogger.js","sourceRoot":"../src","sourcesContent":["'use strict';\nmodule.exports = (function()\n{\n  function _min(d0, d1, d2, bx, ay)\n  {\n    return d0 < d1 || d2 < d1\n        ? d0 > d2\n            ? d2 + 1\n            : d0 + 1\n        : bx === ay\n            ? d1\n            : d1 + 1;\n  }\n\n  return function(a, b)\n  {\n    if (a === b) {\n      return 0;\n    }\n\n    if (a.length > b.length) {\n      var tmp = a;\n      a = b;\n      b = tmp;\n    }\n\n    var la = a.length;\n    var lb = b.length;\n\n    while (la > 0 && (a.charCodeAt(la - 1) === b.charCodeAt(lb - 1))) {\n      la--;\n      lb--;\n    }\n\n    var offset = 0;\n\n    while (offset < la && (a.charCodeAt(offset) === b.charCodeAt(offset))) {\n      offset++;\n    }\n\n    la -= offset;\n    lb -= offset;\n\n    if (la === 0 || lb < 3) {\n      return lb;\n    }\n\n    var x = 0;\n    var y;\n    var d0;\n    var d1;\n    var d2;\n    var d3;\n    var dd;\n    var dy;\n    var ay;\n    var bx0;\n    var bx1;\n    var bx2;\n    var bx3;\n\n    var vector = [];\n\n    for (y = 0; y < la; y++) {\n      vector.push(y + 1);\n      vector.push(a.charCodeAt(offset + y));\n    }\n\n    var len = vector.length - 1;\n\n    for (; x < lb - 3;) {\n      bx0 = b.charCodeAt(offset + (d0 = x));\n      bx1 = b.charCodeAt(offset + (d1 = x + 1));\n      bx2 = b.charCodeAt(offset + (d2 = x + 2));\n      bx3 = b.charCodeAt(offset + (d3 = x + 3));\n      dd = (x += 4);\n      for (y = 0; y < len; y += 2) {\n        dy = vector[y];\n        ay = vector[y + 1];\n        d0 = _min(dy, d0, d1, bx0, ay);\n        d1 = _min(d0, d1, d2, bx1, ay);\n        d2 = _min(d1, d2, d3, bx2, ay);\n        dd = _min(d2, d3, dd, bx3, ay);\n        vector[y] = dd;\n        d3 = d2;\n        d2 = d1;\n        d1 = d0;\n        d0 = dy;\n      }\n    }\n\n    for (; x < lb;) {\n      bx0 = b.charCodeAt(offset + (d0 = x));\n      dd = ++x;\n      for (y = 0; y < len; y += 2) {\n        dy = vector[y];\n        vector[y] = dd = _min(dy, d0, dd, bx0, vector[y + 1]);\n        d0 = dy;\n      }\n    }\n\n    return dd;\n  };\n})();\n\n","const cloneEnumerable = function (v) {\n  try {\n    return typeof v === 'object' ? JSON.parse(JSON.stringify(v)) : v\n  } catch (e) {\n    console.error(e, v)\n    return v\n  }\n}\n\nconst getNestedValue = function (\n  obj,\n  keys = [],\n  {\n    defaultValue = undefined, idProperty = 'id', intsAreIds = true, keySeparator = '/'\n  } = {\n    defaultValue: undefined, idProperty: 'id', intsAreIds: true, keySeparator: '/'\n  }\n) {\n  if (typeof keys === 'string') {\n    keys = keys.split(keySeparator)\n  }\n  if (!Array.isArray(keys)) {\n    namedLogError('Invalid keys parameter', {keys})\n    return defaultValue\n  }\n\n  if (keys.length) {\n    const key = keys.splice(0, 1)[0]\n    if (key === '') {\n      return getNestedValue(obj, keys, { defaultValue, idProperty, intsAreIds })\n    }\n    const int = parseInt(key, 10)\n    if (!Number.isNaN(int)) {\n      if (intsAreIds) {\n        const found = findByProperty(obj, idProperty, int, { castToInt: true })\n        if (typeof found !== 'undefined') {\n          return getNestedValue(found, keys, { defaultValue, idProperty, intsAreIds })\n        }\n      } else if (typeof obj[int] !== 'undefined') {\n        return getNestedValue(obj[int], keys, { defaultValue, idProperty, intsAreIds })\n      }\n    }\n    if (typeof obj[key] !== 'undefined') {\n      return getNestedValue(obj[key], keys, { defaultValue, idProperty, intsAreIds })\n    }\n    namedLogError('Nested object not found at given key', {obj, key})\n    return defaultValue\n  } else {\n    return obj\n  }\n}\n\nconst valueToArray = function (\n  value,\n  { \n    blank = [], removeEmpty = false, separator = undefined, trimStrings = false\n  } = {\n    blank: [], removeEmpty: false, separator: undefined, trimStrings: false\n  }\n) {\n  let arr = null\n  switch (typeof value) {\n    case 'object':\n      if (value === null) { return blank }\n      arr = [...(typeof value[Symbol.iterator] === 'function' ? value : Object.values(value))]\n      break\n    case 'undefined': return blank\n    case 'string':\n    default: value = String(value)\n      arr = value.split(separator)\n  }\n\n  if (trimStrings) {\n    for (let i=0; i<arr.length; i++) {\n      if (typeof arr[i] === 'string') {\n        arr[i] = arr[i].trim()\n      }\n    }\n  }\n\n  if (removeEmpty) {\n    for (let i=0; i<arr.length; i++) {\n      const type = typeof arr[i]\n      if (\n        (type === 'string' && arr[i].trim() === '') ||\n        arr[i] === null || type === 'undefined'\n      ) {\n        arr.splice(i--, 1)\n      }\n    }\n  }\n  return arr\n}\n\nconst valueToString = function (value, { blank = '', glue = ', ' } = { blank: '', glue: ', ' }) {\n  switch (typeof value) {\n    case 'string': return value\n    case 'object':\n      if (value === null) { return blank }\n      return [...(typeof value[Symbol.iterator] === 'function' ? value : Object.values(value))].join(glue)\n    case 'undefined': return blank\n    default: return String(value)\n  }\n}\n\nexport { cloneEnumerable, getNestedValue, valueToArray, valueToString }\n","const REGULAR_EXPRESSIONS = {\n  // matches single characters surrounded by whitespace or at the beginning/end of a line\n  singleCharacters: /(?:(?<=^|\\s).(?=$|\\s))/gm,\n  \n  // matches common punctuation except for decimal places and inch/foot symbols\n  punctuation: /(?:\\(|\\)|\\[|\\]|\\{|\\}|\\,|\\.(?!\\d)|(?<!\\d)[\\\"\\'])/g,\n  \n  // matches all whitespace characters\n  whitespace: /\\s/g,\n  \n  //  matches all whitespace characters except spaces\n  tabsAndVerticalWhitespace: /[\\t\\v]/g,\n  \n  // matches multiple spaces\n  multiSpace: /\\ \\ +/g,\n  \n  // matches multiple whitespace characters\n  multiWhitespace: /\\s\\s+/g,\n  \n  // matches common articles and determiners\n  articlesAndDeterminers: /\\b(?:a|and|of|to)\\b/g\n}\n\nexport default REGULAR_EXPRESSIONS","import REGULAR_EXPRESSIONS from './regular-expressions'\nexport { REGULAR_EXPRESSIONS }\n\nexport const DEFAULT_CONFIG = {\n  relevance: { inject: false, field: '_relevance', threshold: -1 },\n  results: { limit: -1 },\n  sort: { byRelevance: true, enabled: true, fields: null },\n  string: {\n    replacements: [\n      { exp: REGULAR_EXPRESSIONS.singleCharacters, val: '' },\n      { exp: REGULAR_EXPRESSIONS.punctuation, val: ' ' },\n      { exp: REGULAR_EXPRESSIONS.articlesAndDeterminers, val: ' ' },\n      { exp: REGULAR_EXPRESSIONS.tabsAndVerticalWhitespace, val: ' ' },\n      { exp: REGULAR_EXPRESSIONS.multiSpace, val: ' ' }\n    ]\n  }\n}\n\n// dictionary property symbols\nexport const LENGTH = Symbol('length')\nexport const OCCURENCES = Symbol('occurences')\nexport const RELEVANCE = Symbol('relevance')\nexport const WEIGHT = Symbol('weight')\n\n// private method symbols\nexport const BUILD_INDEX = Symbol('buildIndex')\nexport const GET_RESULTS = Symbol('getResults')\nexport const INVALIDATE_RESULTS = Symbol('invalidateResults')\nexport const INVALIDATE_SORTING = Symbol('invalidateSorting')\nexport const NORMALIZE_STRING = Symbol('normalizeString')\nexport const UPDATE_RESULTS = Symbol('updateResults')\n\n// private property symbols\nexport const CACHE = Symbol('cache')\nexport const CONFIG = Symbol('config')\nexport const DATA = Symbol('data')\nexport const INDEX = Symbol('index')\nexport const RESULTS = Symbol('results')\nexport const QUERY = Symbol('query')\n","const levenshtein = require('js-levenshtein')\nimport { cloneEnumerable, getNestedValue, valueToArray, valueToString } from './utilities'\nimport {\n  REGULAR_EXPRESSIONS, DEFAULT_CONFIG,\n  LENGTH, OCCURENCES, RELEVANCE, WEIGHT,\n  BUILD_INDEX, GET_RESULTS, INVALIDATE_RESULTS, INVALIDATE_SORTING, NORMALIZE_STRING, UPDATE_RESULTS,\n  CACHE, CONFIG, DATA, INDEX, RESULTS, QUERY\n} from './constants'\n\nclass Catalogger {\n\n  constructor (documents, fields, options) {\n    this[CACHE] = { stringNormalizations: new Map() }\n    this[CONFIG] = { relevance: {}, results: {}, sort: {} }\n    this[DATA] = { documents: [], fields: [], type: 'Array' }\n    this[INDEX] = { dictionary: Object.create(null), valid: true }\n    this[RESULTS] = { items: new Map(), sorted: true, valid: true }\n    this[QUERY] = { processed: '', raw: '', tokens: [] }\n\n    this.config = options\n    this.documents = documents\n    this.fields = fields\n  }\n\n  get config () { return cloneEnumerable(this[CONFIG]) }\n  set config ({ relevance={}, results={}, sort={}, string={} } = { relevance:{}, results:{}, sort:{}, string:{} }) {\n    const config = {\n      relevance: { ...DEFAULT_CONFIG.relevance, ...this[CONFIG].relevance, ...relevance },\n      results: { ...DEFAULT_CONFIG.results, ...this[CONFIG].results, ...results },\n      sort: { ...DEFAULT_CONFIG.sort, ...this[CONFIG].sort, ...sort },\n      string: { ...DEFAULT_CONFIG.string, ...this[CONFIG].string, ...string },\n    }\n    config.sort.fields = valueToArray(config.sort.fields, { removeEmpty: true, trimStrings: true })\n    this[CONFIG] = config\n    this.reIndex()\n  }\n\n  get documents () { return this[DATA].documents }\n  set documents (documents) {\n    if (documents !== this[DATA].documents) {\n      if (typeof documents === 'undefined' || documents === 'null') {\n        this[DATA].documents = []\n      } else {\n        this[DATA].documents = documents\n      }\n      if (Array.isArray(this[DATA].documents)) {\n        this[DATA].type = 'Array'\n      } else {\n        this[DATA].type = 'Object'\n      }\n      this.reIndex()\n    }\n  }\n\n  get fields () { return cloneEnumerable(this[DATA].fields) }\n  set fields (rawFields) {\n    const fields = valueToArray(rawFields, { removeEmpty: true, trimStrings: true })\n    // no fields supplied so we use the fields from the first document\n    if (fields.length === 0 && typeof this[DATA].documents === 'object') {\n      const documents = Object.keys(this[DATA].documents)\n      if (typeof this[DATA].documents[documents[0]] === 'object') {\n        const documentFields = Object.keys(this[DATA].documents[documents[0]])\n        for (const field of documentFields) {\n          if (typeof this[DATA].documents[documents[0]][field] !== 'object') {\n            fields.push(field)\n          }\n        }\n      }\n    }\n    // check if fields have changed\n    if (fields.length === this[DATA].fields.length) {\n      let same = true\n      for (let i = 0; i < fields.length; i++) {\n        if (fields[i] !== this[DATA].fields[i]) {\n          same = false\n          break;\n        }\n      }\n      if (same) {\n        return undefined\n      }\n    }\n    this[DATA].fields = fields\n    this.reIndex()\n  }\n\n  get query () { return this[QUERY].raw }\n  set query (rawQuery) {\n    if (typeof rawQuery === 'string') {\n      if (rawQuery !== this[QUERY].raw) {\n        this[QUERY].raw = rawQuery\n        const processed = this[NORMALIZE_STRING](rawQuery)\n        if (processed !== this[QUERY].processed) {\n          this[QUERY].processed = processed\n          this[QUERY].tokens = [...new Set(processed.split(' '))] // remove duplicates\n          this[INVALIDATE_RESULTS]()\n        }\n      }\n    } else { // invalid rawQuery provided\n      this[QUERY].processed = ''\n      this[QUERY].raw = ''\n      this[QUERY].tokens = []\n    }\n  }\n\n  get indexed () { return this[INDEX].valid }\n  get evaluated () { return this[RESULTS].valid }\n  get sorted () { return this[RESULTS].sorted }\n\n  reIndex () {\n    this[INDEX].valid = false\n    this[INVALIDATE_RESULTS]()\n    this[BUILD_INDEX]()\n    return this\n  }\n\n  resultsFor (query) {\n    this.query = query\n    return this[GET_RESULTS]()\n  }\n\n  *[Symbol.iterator] () {\n    yield* this.result()\n  }\n\n  *result () {\n    const results = this[GET_RESULTS]()\n    for (const result of results) {\n      yield result\n    }\n  }\n\n  [BUILD_INDEX] () {\n    if (!this[INDEX].valid) {\n      if (this[DATA].documents !== null && typeof this[DATA].documents === 'object' && Array.isArray(this[DATA].fields)) {\n        const keys = Object.keys(this[DATA].documents)\n        this[INDEX].dictionary = Object.create(null)\n        const dict = this[INDEX].dictionary\n\n        for (const key of keys) {\n\n          for (const field of this[DATA].fields) {\n            let value = ''\n\n            if (field.includes('.')) {\n              value = getNestedValue(this[DATA].documents[key], field, { keySeparator: '.' })\n            } else {\n              value = this[DATA].documents[key][field]\n            }\n            const rawText = valueToString(value, { glue: ' '}).toLowerCase().trim()\n            if (rawText !== '') {\n              const normalizedText = this[NORMALIZE_STRING](rawText)\n              const tokens = normalizedText.split(' ')\n              let tokenIndex = 0\n\n              for (const token of tokens) {\n                if (typeof dict[token] === 'undefined') {\n                  \n                  dict[token] = Object.create(null)\n                  dict[token][LENGTH] = token.length\n                  dict[token][OCCURENCES] = 0\n                }\n\n                if (typeof dict[token][key] === 'undefined') {\n                  dict[token][key] = Object.create(null)\n                  dict[token][key][OCCURENCES] = 0\n                }\n\n                if (typeof dict[token][key][field] === 'undefined') {\n                  dict[token][key][field] = Object.create(null)\n                  dict[token][key][field].fieldLength = rawText.length\n                  dict[token][key][field].foundAt = []\n                  dict[token][key][field][OCCURENCES] = 0\n                }\n\n                dict[token][OCCURENCES]++\n                dict[token][key][OCCURENCES]++\n                dict[token][key][field][OCCURENCES]++\n\n                dict[token][key][field].foundAt.push(tokenIndex)\n\n                tokenIndex++\n              } // end loop over field tokens\n            } // end if field is empty\n          } // end loop over searchable fields\n        \n        } // end loop over document keys\n        \n        // calculate dictionary entry weights\n        for (const token of Object.keys(dict)) {\n          dict[token][WEIGHT] = 1 / (Math.log(dict[token][OCCURENCES]) + 1)\n          for (const key of Object.keys(dict[token])) {\n            let docWeight = 0\n            for (const field of Object.keys(dict[token][key])) {\n              docWeight += 1 / (Math.log(dict[token][key][field].fieldLength) + 1)\n            }\n            dict[token][key][WEIGHT] = docWeight / dict[token][key][OCCURENCES]\n          }\n        }\n\n      } // end if documents usable\n\n      this[INDEX].valid = true\n    }\n    return this\n  }\n\n  [GET_RESULTS] () {\n    this[UPDATE_RESULTS]()\n\n    const docs = this[DATA].documents\n    const items = this[RESULTS].items\n    const threshold = this[QUERY].processed === '' ? -1 : this[CONFIG].relevance.threshold\n\n    let limit = this[CONFIG].results.limit\n    const resultDocuments = new Map()\n\n    // choosing to duplicate code so there are fewer comparisons inside the loop\n    if (limit === -1) { // unlimited\n      if (threshold === -1) { // all results\n        for (const key of items.keys()) {\n          resultDocuments.set(key, docs[key])\n        }\n      } else { // results that exceed threshold\n        if (this[CONFIG].sort.enabled) { // items are sorted so we can stop when the threshold is reached\n          for (const item of items.entries()) {\n            if (item[1] >= threshold) {\n              resultDocuments.set(item[0], docs[item[0]])\n            } else {\n              break\n            }\n          }\n        } else { // items are unsorted so we have to loop through all of them\n          for (const item of items.entries()) {\n            if (item[1] >= threshold) {\n              resultDocuments.set(item[0], docs[item[0]])\n            }\n          }\n        }\n      }\n    } else { // limited\n      if (threshold === -1) { // all results\n        for (const key of items.keys()) {\n          if (limit > 0) {\n            resultDocuments.set(key ,docs[key])\n            limit--\n          } else {\n            break\n          }\n        }\n      } else { // results that exceed threshold\n        if (this[CONFIG].sort.enabled) { // items are sorted so we can stop when the limit or threshold is reached\n          for (const item of items.entries()) {\n            if (item[1] >= threshold && limit > 0) {\n              resultDocuments.set(item[0], docs[item[0]])\n              limit--\n            } else {\n              break\n            }\n          }\n        } else { // items are unsorted so we have to loop through them until the limit is reached\n          for (const item of items.entries()) {\n            if (item[1] >= threshold && limit > 0) {\n              resultDocuments.set(item[0], docs[item[0]])\n              limit--\n            } else if (limit < 1) {\n              break\n            }\n          }\n        }\n      }\n    }\n\n    if (this[DATA].type === 'Array') {\n      return Array.from(resultDocuments.values())\n    } else {\n      const output = Object.create(null)\n      for (const doc of resultDocuments.entries()) {\n        output[doc[0]] = doc[1]\n      }\n      return output\n    }\n  }\n\n  [INVALIDATE_RESULTS] () {\n    this[RESULTS].items.clear()\n    this[INVALIDATE_SORTING]()\n    this[RESULTS].valid = false\n    return this\n  }\n\n  [INVALIDATE_SORTING] () {\n    this[RESULTS].sorted = false\n    return this\n  }\n\n  [NORMALIZE_STRING] (input) {\n    let normalizedString = ''\n    const str = input.toLowerCase().trim()\n    if (this[CACHE].stringNormalizations.has(str)) {\n      normalizedString = this[CACHE].stringNormalizations.get(str)\n    } else {\n      normalizedString = str\n      for (const replacement of this[CONFIG].string.replacements) {\n        normalizedString = normalizedString.replace(replacement.exp, replacement.val)\n      }\n      this[CACHE].stringNormalizations.set(str, normalizedString)\n    }\n    return normalizedString\n  }\n\n  [UPDATE_RESULTS] () {\n    if (!this[INDEX].valid) {\n      this[BUILD_INDEX]()\n    }\n    if (!this[RESULTS].valid) {\n      this[INVALIDATE_SORTING]()\n      this[RESULTS].items = new Map(Object.keys(this[DATA].documents).map(k => [k, 0]))\n      const results = this[RESULTS].items\n      const dict = this[INDEX].dictionary\n      const dictTokens = Object.keys(dict)\n\n      for (const queryToken of this[QUERY].tokens) {\n        if (typeof dict[queryToken] !== 'undefined') {\n          for (const key of Object.keys(dict[queryToken])) {\n            let relevance = results.get(key)\n            relevance += dict[queryToken][WEIGHT] * dict[queryToken][key][WEIGHT]\n            results.set(key, relevance)\n          }\n        }\n        \n        for (const dictToken of dictTokens) {\n          let matchValue = 0\n          if ((queryToken.length > dictToken.length) ? queryToken.includes(dictToken) : dictToken.includes(queryToken)) {\n            matchValue = Math.min(queryToken.length, dictToken.length) * 0.1\n          } else {\n            const distance = levenshtein(queryToken, dictToken)\n            if (distance < 6) {\n              matchValue = (5 - distance) * 0.01\n            }\n          }\n\n          if (matchValue > 0) {\n            for (const key of Object.keys(dict[dictToken])) {\n              let relevance = results.get(key)\n              relevance += dict[dictToken][WEIGHT] * dict[dictToken][key][WEIGHT] * matchValue\n              results.set(key, relevance)\n            }\n          }\n        }\n      }\n\n      if (this[CONFIG].relevance.inject) {\n        if (this[QUERY].processed === '') {\n          for (const result of results.entries()) {\n            this[DATA].documents[result[0]][this[CONFIG].relevance.field] = 0\n          }\n        } else {\n          for (const result of results.entries()) {\n            this[DATA].documents[result[0]][this[CONFIG].relevance.field] = result[1]\n          }\n        }\n      }\n      this[RESULTS].valid = true\n    }\n\n    if (!this[RESULTS].sorted) {\n      if (this[CONFIG].sort.enabled) {\n        let results = Array.from(this[RESULTS].items.entries())\n        if (Array.isArray(this[CONFIG].sort.fields) && this[CONFIG].sort.fields.length) {\n          const collator = new Intl.Collator(\n            undefined,\n            {\n              caseFirst: 'false',\n              ignorePunctuation: false,\n              localeMatcher: 'best fit',\n              numeric: true,\n              sensitivity: 'base',\n              usage: 'sort'\n            }\n          )\n\n          results.sort((a, b) => {\n            const docA = this[DATA].documents[a[0]]\n            const docB = this[DATA].documents[b[0]]\n            let comparison = 0\n            for (const field of this[CONFIG].sort.fields) {\n              comparison = collator.compare(docA[field], docB[field])\n              if (comparison) {\n                return comparison\n              }\n            }\n            return comparison\n          })\n        }\n        if (this[CONFIG].sort.byRelevance) {\n          results.sort((a, b) => b[1] - a[1])\n        }\n        this[RESULTS].items = new Map(results)\n      }\n      this[RESULTS].sorted = true\n    }\n    return this\n  }\n}\n\n/**\n * Factory function to instantiate and configure a Catalog object\n * \n * @param  { [Object] } documents\n * @param  { Object }   options\n * @param  { Object }   options.relevance\n * @param  { Boolean }  options.relevance.inject    [ false ]\n * @param  { String }   options.relevance.field     [ '_relevance' ]\n * @param  { Number }   options.relevance.threshold [ -1 ]\n * @param  { Object }   options.results\n * @param  { Number }   options.results.limit       [ -1 ]\n * @param  { Object }   options.sort\n * @param  { Boolean }  options.sort.byRelevance    [ true ]\n * @param  { Boolean }  options.sort.enabled        [ true ]\n * @param  { Boolean }  options.sort.fields         [ null ]\n * @param  { Object }   options.string\n * @param  { [Object] } options.string.replacements [ [{}] ]\n * @param  { [String] } using                       [ [] ]\n * @return { Catalog }\n */\nconst catalog = function (\n  documents,\n  {\n    relevance = {}, results = {}, sort = {}, string = {}, using = []\n  } = {\n    relevance: {}, results: {}, sort: {}, string: {}, using: []\n  }\n) {\n  return new Catalogger(documents, using, { relevance, results, sort, string })\n}\n\nconst replacements = DEFAULT_CONFIG.string.replacements\n\nexport {\n  catalog as default,\n  DEFAULT_CONFIG as config,\n  REGULAR_EXPRESSIONS as expressions,\n  replacements,\n}\n"]}